Given a Binary tree, find the largest BST subtree. That is, you need to find the BST with maximum height in the given binary tree. You have to return the height of largest BST.Given a Binary tree, find the largest BST subtree. That is, you need to find the BST with maximum height in the given binary tree. You have to return the height of largest BST.


/**********************************************************

	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public: 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this->data = data;
        	left = NULL;
        	right = NULL;
    	}
	};
	
***********************************************************/
#include<climits>
bool is_bst(BinaryTreeNode<int>*root,int min=INT_MIN,int max=INT_MAX)
{
	if(root==NULL)
	return true;

	if(root->data<min||root->data>max)
	return false;

	bool left_part=is_bst(root->left,min,root->data-1);
	bool right_part=is_bst(root->right,root->data,max);

	return left_part&&right_part;



}

int get_height(BinaryTreeNode<int>*root)
{
	if(root==NULL)
	return 0;

	return 1+max(get_height(root->left),get_height(root->right));
}

int largestBSTSubtree(BinaryTreeNode<int> *root) {
    // Write your code here
	if(root==NULL)
	return 0;

	bool tree=is_bst(root);
	if(tree)
	return get_height(root);

	else
	return max(largestBSTSubtree(root->left),largestBSTSubtree(root->right));




}
