Given a binary tree and an integer S, print all the pair of nodes whose sum equals S.
Note:
1. Assume the given binary tree contains all unique elements.
2. In a pair, print the smaller element first. Order of different pairs doesn't matter.



/**********************************************************
	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/
#include <vector>
using namespace std;

vector<int> v;
void travel_tree(BinaryTreeNode<int>*root)
{
	if(root==NULL)
	return;

	v.push_back(root->data);
	travel_tree(root->left);
	travel_tree(root->right);

	return;

	

}
#include <algorithm>
void pairSum(BinaryTreeNode<int> *root, int sum) {
    // Write your code here
	if(root==NULL)
	 return;

	 travel_tree(root);

	 sort(v.begin(),v.end());//sort function for vector
     
	 int i=0;
	 int j=v.size()-1;

	 while(i<j)
	 {
		 if(v.at(i)+v.at(j)>sum)
		 j--;

		 else if(v.at(i)+v.at(j)<sum)
		 i++;

                 else {

                   cout << v.at(i) << ' ' << v.at(j) << endl;
                   i++;
                   j--;
                 }
         }

	 return;



	 

	


	 


	
	
}
