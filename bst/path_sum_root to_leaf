For a given Binary Tree of type integer and a number K, print out all root-to-leaf paths where the sum of all the node data along the path is equal to K.
Example:
alt txt

If you see in the above-depicted picture of Binary Tree, we see that there are a total of two paths, starting from the root and ending at the leaves which sum up to a value of K = 13.

The paths are:
a. 2 3 4 4
b. 2 3 8

One thing to note here is, there is another path in the right sub-tree in reference to the root, which sums up to 13 but since it doesn't end at the leaf, we discard it.
The path is: 2 9 2(not a leaf)




/**********************************************************

	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/
#include <vector>
void helper(BinaryTreeNode<int>*root,int k, vector<int>v)
{
     if(root==NULL)
	 return ;

	 v.push_back(root->data);   //root->data ko add kiya
	 k=k-root->data;             //sum = sum-root->data

	 if(root->left==NULL&&root->right==NULL) //leaf node
	 {
            if(k==0)      // means after including we get desired sum
			{
				for(int i=0;i<v.size();i++)
				{
					cout<<v.at(i)<<' ';
				}
				cout<<endl;
			}

			//else part yani path include nhi krna hai yaani sum nhi mila 
	 }
	 helper(root->left,  k,  v);  //if node is not leaf we go deeper into trr until get leaf node
	 helper(root->right,  k,  v);

	 return;
}

void rootToLeafPathsSumToK(BinaryTreeNode<int> *root, int k) {
    // Write your code here
	vector<int> v;
	helper(root,k,v);
	return;

}
