
#include<iostream>
using namespace std;
class TreeNode
{
    public:
    int value;
    TreeNode *left;
    TreeNode  *right;
    int height;

TreeNode(int data)
{
    this->data=data;
    left=right=NULL;
    height=1;
}

};

int height(TreeNode*n)
{
    if (n == NULL)
        return 0;
    return n->height;
}
 
int max(int a, int b)
{
    if(a>b)
    return a;
    return b;
}
 
/*struct Node* newnode(int data)
{
    struct Node* n = (struct Node*)malloc(sizeof(struct Node));
    n->key   = data;
    n->left   = NULL;
    n->right  = NULL;
    n->height = 1;
    return n;
}*/
 
TreeNode *RotateRight(TreeNode *n)
{
    TreeNode *x = n->left;
    TreeNode *T2 = x->right;
 
    x->right = n;
    n->left = T2;
 
    n->height = max(height(n->left), height(n->right))+1;
    x->height = max(height(x->left), height(x->right))+1;

    return x;
}

TreeNode*RotateLeft(TreeNode *n)
{
    TreeNode *y = n->right;
    TreeNode *T2 = y->left;
 
    y->left = n;
    n->right = T2;
 
    n->height = max(height(n->left), height(n->right))+1;
    y->height = max(height(y->left), height(y->right))+1;

    return y;
}

int Balance(TreeNode *n)
{
    if (n == NULL)
        return 0;
    return height(n->left) - height(n->right);
}
void insert_node(TreeNode*&root,int value)
{
    TreeNode *newnode=new TreeNode(value);
    if(root==NULL)
    {
        root=newnode;
        return;
    }
    if(root->data>value)
    {
        insert_node(root->left,value);
    }
    else if(root->data<value)
    {
        insert_node(root->right,value);
    }
    return;
}
 
struct Node * minNode(struct Node* n)
{
    struct Node* current = n;
    while (current->left != NULL)
        current = current->left;
 
    return current;
}

struct Node* deleteNode(struct Node* root, int key)
{
    if (root == NULL)
        return root;
    if ( key < root->key )
        root->left = deleteNode(root->left, key);
    else if( key > root->key )
        root->right = deleteNode(root->right, key);
    else
    {
        if( (root->left == NULL) || (root->right == NULL) )
        {
            struct Node *temp = root->left ? root->left : root->right;
            if (temp == NULL)
            {
                temp = root;
                root = NULL;
            }
            else
             *root = *temp;
            free(temp);
        }
        else
        {
            struct Node* temp = minNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key);
        }
    }
    if (root == NULL)
      return root;
    root->height = 1 + max(height(root->left),height(root->right));
    int b = Balance(root);
 
    if (b > 1 && Balance(root->left) >= 0)
        return RotateRight(root);
    if (b > 1 && Balance(root->left) < 0)
    {
        root->left = RotateLeft(root->left);
        return RotateRight(root);
    }
    if (b < -1 && Balance(root->right) <= 0)
        return RotateLeft(root);
    if (b < -1 && Balance(root->right) > 0)
    {
        root->right = RotateRight(root->right);
        return RotateLeft(root);
    }
 
    return root;
}
void preOrder(TreeNode *root)
{
    if(root != NULL)
    {
        cout<<root->key;
        preOrder(root->left);
        preOrder(root->right);
    }
}

int main()
{
  TreeNode *root = NULL;

    root = insert(root, 8);
    root = insert(root, 4);
    root = insert(root, 9);
    root = insert(root, 1);
    root = insert(root, 5);
    root = insert(root, 10);
    root = insert(root, -1);
    root = insert(root, 1);
    root = insert(root, 7);
 
    cout<<"Preorder traversal before deletion:"<<endl;
    preOrder(root);
    root = deleteNode(root, 9);
    cout<<"Preorder traversal after deletion of 9:"<<endl;
    preOrder(root);
    return 0;
}


