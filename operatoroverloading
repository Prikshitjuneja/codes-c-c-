#include<algorithm>

#include<iostream>
class Fraction
{
private:
    int numerator,denominator;

    public:

    Fraction(int numerator,int denominator)
    {
        this->numerator=numerator;
        this->denominator=denominator;

    }
    Fraction add(Fraction const&f2)
    {
        int lcm=denominator*f2.denominator;
        int x=lcm/denominator;
        int y=lcm/f2.denominator;
        int num=(x*numerator)+(y*f2.numerator);
        Fraction fnew(num,lcm);
        fnew.simplify();
        return fnew;

    }

    //operator overloading
    //add operator
    Fraction operator+(Fraction const&f2)const
    {
        int lcm=denominator*f2.denominator;
        int x=lcm/denominator;
        int y=lcm/f2.denominator;
        int num=(x*numerator)+(y*f2.numerator);
        Fraction fnew(num,lcm);
        fnew.simplify();
        return fnew;

    }
    //equal operator
    bool operator==(Fraction const&f2)const
    {
        return(numerator==f2.numerator&&denominator==f2.denominator);
    }

    //preincrement opertor
    Fraction& operator++()
    {
        numerator=numerator+denominator;
        simplify();
        return*this;

    }
    //postincrement opeartor
    Fraction operator++(int)
    {
        Fraction fnew(numerator,denominator);
        fnew.simplify();
         numerator=numerator+denominator;
        simplify();
        return fnew;


    }
    // +=operator
    Fraction& operator+=(Fraction const&f2)
    {
        int lcm=denominator*f2.denominator;
         int x=lcm/denominator;
        int y=lcm/f2.denominator;

        int num=x*numerator+y*f2.numerator;
        numerator=num;
        denominator=lcm;
        simplify();
        rteurn*this;


    }


    void simplify()
    {
        int gcd=1;

        int j= std::min(this->numerator,this->denominator);
        for(int i=1;i<=j;i++)
        {
            if(this->numerator%i==0&&this->denominator%i==0)
            {
                gcd=i;
            }
        }
        this->numerator=this->numerator/gcd;
        this->denominator=this->denominator/gcd;

    }
    void print()
    {
        std::cout<<this->numerator<<'/'<<this->denominator<<std::endl;

    }

};






